redis是一个缓存数据库，不建议做消息中间键
redis的数据类型
string
hash
list
set
zset
redis的持久化:RDB和Aof

限流:
1,线程池
2，nginx限制并发连接数
3，限制每秒的平均速率

redis的性能测试，手写及事物


redis的主从原理(和单节点差不多) slave-red-on yes

redis的哨兵机制-->高可用，redis-sentinel：主动切换主从关系

redis集群：redisCluster是redis的分布式解决方案

分布式架构:
缓存实战
redis的序列化策略:String类型 Object类型(implement Serializabe)
并发的选择策略:加缓存，静态化，集群，分布式，同步转异步，限流降级

适合缓存的场景:访问频率高，更改频率低，一致性要求不高
缓存，缓存的是最终的返回的数据

缓存过期和一致性的问题
--缓存击穿:某一个key---->1，加锁，限流 2，缓存预热
--缓存雪崩：大量的key---->改被动失效为主动失效
--缓存穿透：查询库中不存在(大量查询)--->根据业务过滤
         布隆过滤器

分布式事物
什么样的资源，在并发下会出现问题
--动作不是原子，有中间态的(从1到2需要时间的)
事物：原来不是原子的操作，在并发的环境下，模拟成原子动作

编程事物----->声明式事物(@Truncation)



